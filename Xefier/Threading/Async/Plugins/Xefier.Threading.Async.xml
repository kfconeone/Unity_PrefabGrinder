<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Xefier.Threading.Async</name>
    </assembly>
    <members>
        <member name="T:Xefier.Threading.Asynchronous.Async">
            <summary>
            Utility for performing asynchronous operations such as:
            - Object.Instantiate/Destroy
            </summary>
        </member>
        <member name="M:Xefier.Threading.Asynchronous.Async.Destroy``1(Xefier.Threading.Asynchronous.Async{``0},System.Boolean)">
            <summary>
            Destroys object instance, or prevents the instantiation of the object entirely
            </summary>
            <param name="obj">
            The object to destroy
            </param>
            <param name="destroyGameObject">
            Whether or not to destroy the components GameObject<br/>
            false = default behavior<br/>
            true = T.gameObject.Destroy()<br/>
            </param>
        </member>
        <member name="M:Xefier.Threading.Asynchronous.Async.Instantiate``1(``0,UnityEngine.Transform,System.Boolean)">
            <summary>
            Asynchronously clones the object original
            </summary>
            <param name="original">An existing object that you want to make a copy of.</param>
            <param name="parent">Parent that will be assigned to the new object.</param>
            <param name="worldPositionStays">If when assigning the parent the original world position should be maintained.</param>
            <returns>A wrapper for interacting with the asynchronous object (Do NOT assume the object has been instantiated yet)</returns>
        </member>
        <member name="M:Xefier.Threading.Asynchronous.Async.Instantiate``1(``0,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Transform)">
            <summary>
             Asynchronously clones the object original
            </summary>
            <param name="original">An existing object that you want to make a copy of.</param>
            <param name="position">Position for the new object.</param>
            <param name="rotation">Orientation of the new object.</param>
            <param name="parent">Parent that will be assigned to the new object.</param>
            <returns>A wrapper for interacting with the asynchronous object (Do NOT assume the object has been instantiated yet)</returns>
        </member>
        <member name="M:Xefier.Threading.Asynchronous.Async.Run(System.Action)">
            <summary>
            Schedules the specified action to be ran on the main thread
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Xefier.Threading.Asynchronous.Async.Run``1(System.Func{``0})">
            <summary>
            Schedules the specified action to be ran on the main thread with a result
            </summary>
            <typeparam name="T"></typeparam>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Xefier.Threading.Asynchronous.Async.Run(Xefier.Threading.Tasks.ITask)">
            <summary>
            Schedules the specified task to be ran on the main thread
            </summary>
            <param name="task"></param>
        </member>
        <member name="M:Xefier.Threading.Asynchronous.Async.Run``1(Xefier.Threading.Tasks.ITask{``0})">
            <summary>
            Schedules the specified task to be ran on the main thread with a result
            </summary>
            <typeparam name="T"></typeparam>
            <param name="task"></param>
        </member>
        <member name="T:Xefier.Threading.Asynchronous.Async`1">
            <summary>
            Represents an asynchronous operation.<br/>
            WARNING: <br/>
            Do not assume Result is ready immediately after calling Instantiate(), you will get a null reference exception<br/>
            </summary>
        </member>
        <member name="T:Xefier.Threading.Asynchronous.Async`1.AsyncObjectEventHandler">
            <summary>
            Delegate for Ready event
            </summary>
            <param name="obj"></param>
        </member>
        <member name="E:Xefier.Threading.Asynchronous.Async`1.Ready">
            <summary>
            Event that is triggered when the asynchronous object is ready<br/> 
            </summary>
        </member>
        <member name="P:Xefier.Threading.Asynchronous.Async`1.IsReady">
            <summary>
            Use IsCompleted instead
            </summary>
        </member>
        <member name="P:Xefier.Threading.Asynchronous.Async`1.Instance">
            <summary>
            Use Result instead
            </summary>
        </member>
        <member name="M:Xefier.Threading.Asynchronous.Async`1.Destroy(System.Boolean)">
            <summary>
            Destroys object instance, or prevents the instantiation of the object entirely
            </summary>
            <param name="destroyGameObject">
            Whether or not to destroy the components GameObject
            false = default behavior
            true = T.gameObject.Destroy()
            </param>
        </member>
        <member name="T:Xefier.Threading.Asynchronous.AsyncTask">
            <summary>
            Represents an asynchronous operation.<br/>
            </summary>
        </member>
        <member name="M:Xefier.Threading.Asynchronous.AsyncTask.Wait">
            <summary>
            WARNING: Async.Wait is not supported
            </summary>
        </member>
        <member name="P:Xefier.Threading.Asynchronous.AsyncTask.AsyncWaitHandle">
            <summary>
            WARNING: Async.AsyncWaitHandle is not supported
            </summary>
        </member>
        <member name="T:Xefier.Threading.Asynchronous.AsyncResource`1">
            <summary>
            Represents an asynchronous operation, specifically used to load a resource<br/>
            </summary>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="T:Xefier.Threading.Asynchronous.Scheduler.MainScheduler">
            <summary>
            This component must be added to a game object in scene
            - Sends update events to MainSchedulerService
            </summary>
        </member>
        <member name="T:Xefier.Threading.Asynchronous.Scheduler.SchedulerSetting">
            <summary>
            Configuration settings for the scheduler
            </summary>
        </member>
        <member name="P:Xefier.Threading.Asynchronous.Scheduler.SchedulerSetting.MaxFrameTimeMS">
            <summary>
            Maximum frame time in milliseconds (0 = Unlimited)
            </summary>
        </member>
        <member name="P:Xefier.Threading.Asynchronous.Scheduler.SchedulerSetting.IncludeTotalFrameTime">
            <summary>
            Whether or not the scheduler should consider how much time has been spent in the current frame before we update
            </summary>
        </member>
        <member name="T:Xefier.Threading.Asynchronous.AsyncTask`1">
            <summary>
            Represents an asynchronous operation that can return a value.
            </summary>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="P:Xefier.Threading.Asynchronous.AsyncTask`1.Result">
            <summary>
            Gets the result value of this Task.
            </summary>
        </member>
        <member name="M:Xefier.Threading.Asynchronous.AsyncTask`1.ContinueWith(System.Action{Xefier.Threading.Tasks.ITask{`0}})">
            <summary>
            Creates a continuation that executes asynchronously when the target task completes. 
            </summary>
            <param name="continuationAction">An action to run when the antecedent Task_TResult completes. When run, the delegate will be passed the completed task as an argument.</param>
            <returns></returns>
        </member>
    </members>
</doc>
